https://www.youtube.com/watch?v=43BZsLZheA4

git clone --branch start --single-branch https://github.com/godotneers/saving-loading-video.git

////////////////////////////////
SAVE
var file = FileAccess.open("user://savegame.data", FileAccess.WRITE)

#store_var c'est une fonction de FileAccess
#qui permet d'enregistrer une variable dans le fichier
file.store_var(player.global_position)

LOAD
var file = FileAccess.open("user://savegame.json", FileAccess.READ)

player.global_position = file.get_var()

8:50
store_var l'ordre à son importance
le 1er get_var va regarder le 1er enregistrement
le 2e get_var va regarder le 2e enregistrement
…


////////////////////////////////

Format JSON chapter dans la video

SAVE
var file = FileAccess.open("user://savegame.json", FileAccess.WRITE)

var saved_data = {}
saved_data["player_global_position:x"] = player.global_position.x
saved_data["player_global_position:y"] = player.global_position.y
saved_data["player_health"] = player.health
	
#dictionary to json
var json  = JSON.stringify(saved_data)
	
#ecrire le json dans un fichier
file.store_string(json)
file.close()

LOAD
var file = FileAccess.open("user://savegame.json", FileAccess.READ)

#get_as_text : lis tout le fichier, tout son contenu est convertit en string
var json = file.get_as_text()
	
#string to dictionary
var saved_data = JSON.parse_string(json)
	
player.health = saved_data["player_health"]
player.global_position.x = saved_data["player_global_position:x"]
player.global_position.y = saved_data["player_global_position:y"]

////////////////////////////////

Format dictionaries chapter dans la video

SAVE
var file = FileAccess.open("user://savegame.data", FileAccess.WRITE)
	
var saved_data = {}
saved_data["player_global_position"] = player.global_position
saved_data["player_health"] = player.health
	
file.store_var(saved_data)
file.close()

LOAD
var file = FileAccess.open("user://savegame.data", FileAccess.READ)
	
var saved_data =file.get_var()
	
player.health = saved_data["player_health"]
player.global_position = saved_data["player_global_position"]
file.close()

////////////////////////////////
Format Resources chapter dans la video

SAVE
var saved_game:SavedGame = SavedGame.new()
saved_game.player_health = player.health
saved_game.player_position = player.global_position
	
ResourceSaver.save(saved_game, "user://savegame.tres")

LOAD
var save_game = load("user://savegame.tres") as SavedGame
	
player.health = save_game.player_health
player.global_position = save_game.player_position

////////////////////////////////

Format handling dynamic element approach chapter dans la video

SAVE
var saved_game:SavedGame = SavedGame.new()
saved_game.player_health = player.health
saved_game.player_position = player.global_position
	
#parcours les nodes qui sont dasn le groupe fish dans la scene
for fish in get_tree().get_nodes_in_group("fish"):
	#append : ajoute l'element à la fin de l'Array
	saved_game.fish_positions.append(fish.global_position)
	
ResourceSaver.save(saved_game, "user://savegame.tres")

LOAD
var saved_game = load("user://savegame.tres") as SavedGame
	
player.health = saved_game.player_health
player.global_position = saved_game.player_position
	
#CLEAR
#parcours les nodes qui sont dasn le groupe fish dans la scene
for fish in get_tree().get_nodes_in_group("fish"):
	#Bonne pratique :  d'abord remove le node, puis queue free
	fish.get_parent().remove_child(fish)
	fish.queue_free()
	
for position in saved_game.fish_positions:
	var fish = preload("res://fish/fish.tscn")
	var new_fish = fish.instantiate()
		
	world_root.add_child(new_fish)
	new_fish.global_position = position

////////////////////////////////

Format generalized approach chapter dans la video

SAVE
var saved_game:SavedGame = SavedGame.new()
saved_game.player_health = player.health
saved_game.player_position = player.global_position
	
var saved_data: Array[SavedData] = []
#la fonction on_save_game sera appelé sur
#tous les nodes dans la tree qui appartienent au groupe game_events
get_tree().call_group("game_events", "on_save_game", saved_data)
saved_game.saved_data = saved_data
	
ResourceSaver.save(saved_game, "user://savegame.tres")

LOAD
var saved_game = load("user://savegame.tres") as SavedGame
	
player.health = saved_game.player_health
player.global_position = saved_game.player_position
	
#CLEAR
get_tree().call_group("game_events", "on_before_load_game")
	
for item in saved_game.saved_data:
	var scene = load(item.scene_path) as PackedScene
	var restored_node = scene.instantiate()
		
	world_root.add_child(restored_node)
		
	if restored_node.has_method("on_load_game"):
		restored_node.on_load_game(item)

////////////////////////////////

Format extending the generalized approach chapter dans la video

SAVE

LOAD